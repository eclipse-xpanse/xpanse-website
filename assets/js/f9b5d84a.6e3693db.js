"use strict";(self.webpackChunkxpanse_website=self.webpackChunkxpanse_website||[]).push([[6570],{9653:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"request-audit","title":"Request Audit","description":"All API calls to xpanse can be audited and tracked. The implementation of audit functionality is CSP plugin specific.","source":"@site/docs/request-audit.mdx","sourceDirName":".","slug":"/request-audit","permalink":"/xpanse/docs/request-audit","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"Policies","permalink":"/xpanse/docs/policies"},"next":{"title":"Runtime","permalink":"/xpanse/docs/runtime"}}');var a=n(4848),s=n(8453),o=n(2585);const r={sidebar_position:8},d="Request Audit",c={},u=[{value:"Extracting CSP Data",id:"extracting-csp-data",level:2},{value:"Configure Audit for API Methods",id:"configure-audit-for-api-methods",level:3}];function l(e){const t={h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"request-audit",children:"Request Audit"})}),"\n",(0,a.jsx)(t.p,{children:"All API calls to xpanse can be audited and tracked. The implementation of audit functionality is CSP plugin specific.\nThe plugins can decide what they want to do with the audit data. For example, the data can be forwarded to any cloud tracking services or to any logging services or can even be simply ignored."}),"\n",(0,a.jsx)(t.h2,{id:"extracting-csp-data",children:"Extracting CSP Data"}),"\n",(0,a.jsx)(t.p,{children:"If xpanse is running with just one CSP plugin activated, then all services are by default audited by the logic implemented by that specific CSP plugin."}),"\n",(0,a.jsx)(t.p,{children:"if more than one CSP is activated in the xpanse runtime, then we extract the CSP name from the request URI or the request body and then forward the audit request to the corresponding CSP plugin."}),"\n",(0,a.jsx)(t.h3,{id:"configure-audit-for-api-methods",children:"Configure Audit for API Methods"}),"\n",(0,a.jsxs)(t.p,{children:["Developers who write API (controller) methods must annotate these API methods with the ",(0,a.jsx)(o.A,{name:"AuditApiRequest",url:"https://github.com/eclipse-xpanse/xpanse/blob/main/modules/api/src/main/java/org/eclipse/xpanse/api/config/AuditApiRequest.java"})," annotation.\nThe annotation must also be provided with the information on how the CSP value can be extracted from the method's input data."]}),"\n",(0,a.jsxs)(t.p,{children:["All logic to extract CSP information from request data can be found ",(0,a.jsx)(o.A,{name:"here",url:"https://github.com/eclipse-xpanse/xpanse/blob/main/modules/api/src/main/java/org/eclipse/xpanse/api/config/GetCspInfoFromRequest.java"}),". This must be extended if there are any new request data models."]})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},2585:(e,t,n)=>{n.d(t,{A:()=>a});n(6540);var i=n(4848);function a(e){let{name:t,url:n,isOpenInNewTab:a=!0}=e;return(0,i.jsx)("a",{href:n,className:"link-text",target:a?"_blank":"_self",children:t})}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var i=n(6540);const a={},s=i.createContext(a);function o(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);