"use strict";(self.webpackChunkxpanse_website=self.webpackChunkxpanse_website||[]).push([[4961],{7786:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"service-configuration","title":"Service Configuration","description":"Service configuration refers to the application configuration parameters that control the behaviour of the service.","source":"@site/docs/service-configuration.mdx","sourceDirName":".","slug":"/service-configuration","permalink":"/xpanse/docs/service-configuration","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"Service Changes","permalink":"/xpanse/docs/service-changes"},"next":{"title":"Service Deployment","permalink":"/xpanse/docs/service-deployment"}}');var a=t(4848),o=t(8453),r=t(2585);const s={sidebar_position:8},l="Service Configuration",c={},h=[{value:"Service Configuration Details in Service Template",id:"service-configuration-details-in-service-template",level:2},{value:"Configuration Managers",id:"configuration-managers",level:3},{value:"Configuration Parameters",id:"configuration-parameters",level:3},{value:"Single Configuration Manager",id:"single-configuration-manager",level:3},{value:"Configuration Manager in Deployment Script",id:"configuration-manager-in-deployment-script",level:2},{value:"Agent Installation",id:"agent-installation",level:3},{value:"runOnlyOnce Parameter",id:"runonlyonce-parameter",level:2},{value:"Default Configuration",id:"default-configuration",level:2},{value:"Supported Configuration Update Tools",id:"supported-configuration-update-tools",level:2},{value:"Ansible Code Location",id:"ansible-code-location",level:3},{value:"Install Python",id:"install-python",level:3},{value:"Install Ansible",id:"install-ansible",level:3},{value:"Install Dependencies",id:"install-dependencies",level:3},{value:"Service Inventory",id:"service-inventory",level:3},{value:"Extra vars",id:"extra-vars",level:3}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"service-configuration",children:"Service Configuration"})}),"\n",(0,a.jsx)(n.p,{children:"Service configuration refers to the application configuration parameters that control the behaviour of the service."}),"\n",(0,a.jsx)(n.p,{children:"In xpanse, such configuration parameters which that can be changed by the end user must be exposed by the ISV in the\ncorresponding service template and also provide necessary scripts to update the configuration."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"service configuration high level architecture",src:t(3179).A+"",width:"1758",height:"725"})}),"\n",(0,a.jsx)(n.h2,{id:"service-configuration-details-in-service-template",children:"Service Configuration Details in Service Template"}),"\n",(0,a.jsx)(n.p,{children:"Services that would like to allow end users to change service configuration after the service is deployed must provide\nthe following information in the service template."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"service configuration high level architecture",src:t(2594).A+"",width:"919",height:"426"})}),"\n",(0,a.jsx)(n.h3,{id:"configuration-managers",children:"Configuration Managers"}),"\n",(0,a.jsxs)(n.p,{children:["Configuration manager is nothing but a compute ",(0,a.jsx)(n.strong,{children:"component"})," in the service deployment."]}),"\n",(0,a.jsx)(n.admonition,{title:"Example of Configuration Manager",type:"tip",children:(0,a.jsx)(n.p,{children:"In case of a service like Kafka, it consists of multiple components such as zookeeper and broker,\nSo the configuration manager in this case can either be zookeeper or broker."})}),"\n",(0,a.jsx)(n.p,{children:"For every configuration manager, the ISV must declare the location of the scripts, the script name, dependencies, etc\nin the service template."}),"\n",(0,a.jsx)(n.h3,{id:"configuration-parameters",children:"Configuration Parameters"}),"\n",(0,a.jsx)(n.p,{children:"Configurable service parameters must be listed in the service template. For each configuration parameter,\ndetails such as name, description, default, value, configuration manager name (see above) must be provided."}),"\n",(0,a.jsx)(n.admonition,{title:"Relation between configuration parameter and manager",type:"important",children:(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["A service template can have 0",":N"," configuration parameters."]}),"\n",(0,a.jsx)(n.li,{children:"For each configuration parameter, there must be 1:1 configuration manager."}),"\n",(0,a.jsxs)(n.li,{children:["For each service that multiple parameters, there must be 1",":N"," configuration managers."]}),"\n"]})}),"\n",(0,a.jsx)(n.h3,{id:"single-configuration-manager",children:"Single Configuration Manager"}),"\n",(0,a.jsx)(n.p,{children:"For the below use cases, there would be just one single configuration manager.\nAll configuration parameters in the service template will refer to this single configuration manager."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"When the service contains only one component. Example a simple database that runs inside a single VM."}),"\n",(0,a.jsx)(n.li,{children:"When the service contains multiple components but the configuration update script is implemented in such a way\nthat it just executes on component, and it automatically connects to other components to update changes."}),"\n",(0,a.jsxs)(n.li,{children:["When the service contains multiple components but only central component such as ",(0,a.jsx)(n.code,{children:"etcd"})," manages configuration\nfor all components."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"configuration-manager-in-deployment-script",children:"Configuration Manager in Deployment Script"}),"\n",(0,a.jsx)(n.p,{children:"Since a configuration manager is just a component in the service deployment itself,\nwe must ensure that service deployment script creates a component with this name.\nOtherwise, the service template validation will fail."}),"\n",(0,a.jsxs)(n.admonition,{title:"Configuration manager in HCL",type:"info",children:[(0,a.jsx)(n.p,{children:"When we define the deployment script using HCL which is used by Terraform and OpenTofu deployers,\nthe name of the configuration manager must also be the label assigned to the compute resource of that service component."}),(0,a.jsx)(n.p,{children:'In the below example, "zookeeper" can be used as a valid configuration manager in the service template'}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-terraform",children:'    resource "openstack_compute_instance_v2" "zookeeper" {\n    availability_zone  = local.availability_zone\n    name               = "ecs-tf-${random_id.new.hex}"\n    flavor_name          = var.flavor_name\n    security_groups    = [ local.secgroup_name ]\n    image_id           = data.openstack_images_image_v2.image.id\n    admin_pass         = local.admin_passwd\n    network {\n    uuid = local.vpc_id\n    }\n  }\n'})})]}),"\n",(0,a.jsx)(n.h3,{id:"agent-installation",children:"Agent Installation"}),"\n",(0,a.jsx)(n.p,{children:"Every component which is also acts as a configuration manager,\nmust install the xpanse agent as part of its resource creation."}),"\n",(0,a.jsxs)(n.p,{children:["Read more about xpanse agents ",(0,a.jsx)(r.A,{name:"here",url:"./agent"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"runonlyonce-parameter",children:"runOnlyOnce Parameter"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"runOnlyOnce"})," parameter is used to define when multiple instance of a ",(0,a.jsx)(n.strong,{children:"component"})," of the service exists but\nthe configuration update should be executed on only one of them."]}),"\n",(0,a.jsx)(n.p,{children:"This means the configuration change will be"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"either be automatically synced to other instances of the component or"}),"\n",(0,a.jsx)(n.li,{children:"the configuration update job on one instance connects to all other instances and\nmakes the necessary configuration changes."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"default-configuration",children:"Default Configuration"}),"\n",(0,a.jsx)(n.p,{children:"When the service is first created, the default value of each of the configuration parameter is stored as the current\nconfiguration of the service in the xpanse database. Any further changes to the configuration of the service will be\nbased on this default configuration."}),"\n",(0,a.jsx)(n.h2,{id:"supported-configuration-update-tools",children:"Supported Configuration Update Tools"}),"\n",(0,a.jsx)(n.p,{children:"Currently, Ansible is supported as a configuration update tool.\nThis means, ISVs must implement one Ansible playbook for each configuration manager."}),"\n",(0,a.jsx)(n.h3,{id:"ansible-code-location",children:"Ansible Code Location"}),"\n",(0,a.jsx)(n.p,{children:"All Ansible code must be stored in a GIT repository and the repository must be reachable from the"}),"\n",(0,a.jsx)(n.admonition,{title:"Future plans",type:"info",children:(0,a.jsx)(n.p,{children:"The plan is to allow to download the scripts from locations other than GIT repositories in future releases."})}),"\n",(0,a.jsx)(n.h3,{id:"install-python",children:"Install Python"}),"\n",(0,a.jsx)(n.p,{children:"Agent which executes the Ansible playbooks expects the required Python version to be already installed."}),"\n",(0,a.jsxs)(n.admonition,{title:"Use default Python version",type:"important",children:[(0,a.jsx)(n.p,{children:"As a workaround, we can simply use the default Python version that comes with the OS installation and\nthen have the Python installation task itself as a preparation task in the configuration update playbook and\nthen use the new version of Python in the actual configuration update tasks."}),(0,a.jsx)(n.p,{children:"But we must then ensure that the Python can be downloaded from a source which is reachable from the compute node."})]}),"\n",(0,a.jsx)(n.h3,{id:"install-ansible",children:"Install Ansible"}),"\n",(0,a.jsx)(n.p,{children:"Ansible can be installed in the configuration manager node as part of the service deployment or let the agent\ninstall it as part of the first configuration update request via the dependencies install step documented below."}),"\n",(0,a.jsx)(n.h3,{id:"install-dependencies",children:"Install Dependencies"}),"\n",(0,a.jsxs)(n.p,{children:["All Python dependencies can be also be installed using the required Python version.\nAgent uses ",(0,a.jsx)(n.code,{children:"pip install"})," to install Python dependencies from PyPi repository."]}),"\n",(0,a.jsx)(n.admonition,{title:"Install Dependencies from other sources",type:"tip",children:(0,a.jsx)(n.p,{children:"Instead of using dependencies from PyPi repository, we can also simply put the dependencies in any other\naccessible remote directory and let the Ansible playbook to first download and install them."})}),"\n",(0,a.jsx)(n.h3,{id:"service-inventory",children:"Service Inventory"}),"\n",(0,a.jsxs)(n.p,{children:["When xpanse returns a configuration change request to the agent, the request also contains the full inventory of the\nservice in the ",(0,a.jsx)(n.strong,{children:"Ansible Inventory JSON"})," format. It can be directly used by the playbooks."]}),"\n",(0,a.jsx)(n.admonition,{title:"Working with localhost",type:"important",children:(0,a.jsx)(n.p,{children:"In some cases, the inventory isn't needed at all since the Ansible job runs directly on the host.\nSo simply delegating the playbook to localhost will suffice in such cases."})}),"\n",(0,a.jsx)(n.h3,{id:"extra-vars",children:"Extra vars"}),"\n",(0,a.jsxs)(n.p,{children:["The requested configuration of the service is returned to the agent which then passes this information to the\nAnsible playbook execution as ",(0,a.jsx)(n.strong,{children:"extra_vars"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"The requested configuration always contains the combined final configuration of the service. This means, the changed\nparameters with updated values and the unchanged parameters with the existing values."}),"\n",(0,a.jsxs)(n.admonition,{title:"Avoid points of failure",type:"danger",children:[(0,a.jsx)(n.p,{children:"Even though xpanse supports setting up of complete Ansible environment with the agent,\nit's always better to prepare all necessary setup required in the configuration manager nodes as part of the\nservice deployment itself to avoid any unexpected failures. For example, Network Error."}),(0,a.jsx)(n.p,{children:"We can even consider preparing the complete Ansible environment in the VM image that's used by the service."})]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},2585:(e,n,t)=>{t.d(n,{A:()=>a});t(6540);var i=t(4848);function a({name:e,url:n,isOpenInNewTab:t=!0}){return(0,i.jsx)("a",{href:n,className:"link-text",target:t?"_blank":"_self",children:e})}},3179:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/service-configuration-high-level.excalidraw-c0528aec6d759ec4f9335739a39c5b8b.png"},2594:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/service-configuration-in-template.excalidraw-18ee846b3326003833d27543ed7bafcf.png"},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var i=t(6540);const a={},o=i.createContext(a);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);