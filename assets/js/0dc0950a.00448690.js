"use strict";(self.webpackChunkxpanse_website=self.webpackChunkxpanse_website||[]).push([[6321],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||l;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},16912:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const l={sidebar_position:10},i="UI",o={unversionedId:"ui",id:"ui",title:"UI",description:"This is the frontend for the Xpanse project which allows cloud service providers to register managed services to the",source:"@site/docs/ui.md",sourceDirName:".",slug:"/ui",permalink:"/xpanse/docs/ui",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Service Deployment",permalink:"/xpanse/docs/service-deployment"},next:{title:"New Developers",permalink:"/xpanse/docs/Contribute/new-developers"}},s={},p=[{value:"Development Setup",id:"development-setup",level:2},{value:"Configuration Properties",id:"configuration-properties",level:3},{value:".env Files",id:"env-files",level:4},{value:"Environment Variables",id:"environment-variables",level:4},{value:"Starting local development server",id:"starting-local-development-server",level:3},{value:"Generate Rest Client for Xpanse API",id:"generate-rest-client-for-xpanse-api",level:3},{value:"Build for production",id:"build-for-production",level:2},{value:"Docker Image",id:"docker-image",level:2},{value:"Pre-requisites",id:"pre-requisites",level:3},{value:"Build Image",id:"build-image",level:3},{value:"Run UI Container",id:"run-ui-container",level:3},{value:"Application Logs",id:"application-logs",level:3}],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"ui"},"UI"),(0,r.kt)("p",null,"This is the frontend for the Xpanse project which allows cloud service providers to register managed services to the\nservice catalog and also for end users to deploy services from the service catalog and manage them."),(0,r.kt)("h2",{id:"development-setup"},"Development Setup"),(0,r.kt)("p",null,"Project is built using ",(0,r.kt)("inlineCode",{parentName:"p"},"ReactJS")," library. As we use ",(0,r.kt)("inlineCode",{parentName:"p"},"TypeScript")," here, we must ensure all objects have its type explicit\ndefined."),(0,r.kt)("p",null,"GUI components are built using ",(0,r.kt)("inlineCode",{parentName:"p"},"antd")," library."),(0,r.kt)("p",null,"Authentication and authorization are built using ",(0,r.kt)("inlineCode",{parentName:"p"},"Zitadel"),"."),(0,r.kt)("h3",{id:"configuration-properties"},"Configuration Properties"),(0,r.kt)("p",null,"All required configuration parameters must be added to .env\nfile ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/eclipse-xpanse/xpanse-ui/blob/main/.env"},"here"),". Even if there is a valid\ndefault value, we can just add empty value. This file serves as reference to all required properties"),(0,r.kt)("p",null,"We use two different ways of reading configuration properties for the application."),(0,r.kt)("h4",{id:"env-files"},".env Files"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Set values in the .env files.\nAll default values are set in .env files.\nThese are automatically loaded by ",(0,r.kt)("inlineCode",{parentName:"li"},"React")," and there is no need to do anything for this to be loaded."),(0,r.kt)("li",{parentName:"ol"},"For non-default properties or to override the values is .env, we can set the values in new .env files and load them\nusing ",(0,r.kt)("inlineCode",{parentName:"li"},"env-cmd")," framework which will automatically inject the variables.\nExample can be\nfound ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/eclipse-xpanse/xpanse-ui/blob/main/package.json#L20"},"here"))),(0,r.kt)("h4",{id:"environment-variables"},"Environment Variables"),(0,r.kt)("p",null,"All variables can be overridden by setting environment variables and then running the npm start or build scripts."),(0,r.kt)("h3",{id:"starting-local-development-server"},"Starting local development server"),(0,r.kt)("p",null,"In the project directory, you can run the below command to start the local development server. This also additionally\nneeds ",(0,r.kt)("inlineCode",{parentName:"p"},"nodejs")," to be installed on the development machine."),(0,r.kt)("p",null,"If there is a local development Zitadel instance, then we must set ",(0,r.kt)("inlineCode",{parentName:"p"},"REACT_APP_ZITADEL_CLIENT_ID")," environment variable\nand then run the below command."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ npm run start\n")),(0,r.kt)("p",null,"If you wish to use our central Zitadel testbed instance, then simply start the application with below command."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ npm run start-with-zitadel-testbed\n")),(0,r.kt)("p",null,"Open ",(0,r.kt)("a",{parentName:"p",href:"http://localhost:3000"},"http://localhost:3000")," to view it in the browser."),(0,r.kt)("h3",{id:"generate-rest-client-for-xpanse-api"},"Generate Rest Client for Xpanse API"),(0,r.kt)("p",null,"We use the openapi generator to generate data models and rest client from the openapi json file.\nThe following steps must be followed to generate a new client and data models whenever there is a new version if the\nswagger json."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Copy the openapi file to ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/eclipse-xpanse/xpanse-ui/blob/main/src/xpanse-api/api.json"},"OpenApi JSON File")),(0,r.kt)("li",{parentName:"ol"},"Run the code generator as below",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"    cd src/xpanse-api\n    npx openapi-typescript-codegen --input api.json --output ./generated --exportSchemas false\n")),"This step will generate all required models and client"),(0,r.kt)("li",{parentName:"ol"},"Add license headers."),(0,r.kt)("li",{parentName:"ol"},"Format newly generated files.")),(0,r.kt)("h2",{id:"build-for-production"},"Build for production"),(0,r.kt)("p",null,"The build must ensure that all configuration parameters are correctly set.\nWe can either export the parameters as environment variables or add ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," files and execute the build command as below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ npm run build\n")),(0,r.kt)("p",null,"Builds the app for production to the ",(0,r.kt)("inlineCode",{parentName:"p"},"build")," folder. Contents can be copied to any webserver to host the frontend files."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note: Since the UI application is completely browser-based, all configuration parameters must be injected directly to\nthe application at build time. No configuration can be updated at runtime.")),(0,r.kt)("h2",{id:"docker-image"},"Docker Image"),(0,r.kt)("p",null,"Docker image for the UI project is based on nginx base image. This is because the project only serves static content."),(0,r.kt)("h3",{id:"pre-requisites"},"Pre-requisites"),(0,r.kt)("p",null,"Before the docker image can be built, all required parameters must be set and then the following steps must be\nexecuted so that all dependent files are generated."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"npm install && \\\nnpm run build\n")),(0,r.kt)("h3",{id:"build-image"},"Build Image"),(0,r.kt)("p",null,"TO build image, run the below command."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"docker build  -t xpanse-ui -f docker/Dockerfile .\n")),(0,r.kt)("h3",{id:"run-ui-container"},"Run UI Container"),(0,r.kt)("p",null,"Container runs the application on port ",(0,r.kt)("inlineCode",{parentName:"p"},"80")," by default. If you want the application to be reachable on port 3000 for\ndevelopment purposes, then the container can be started as below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"docker run -d -p 80:3000 --name ui xpanse-ui\n")),(0,r.kt)("h3",{id:"application-logs"},"Application Logs"),(0,r.kt)("p",null,"All logs from nginx are routed to stdout by default. Using the below command, all application logs can be viewed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"docker logs ui\n")))}d.isMDXComponent=!0}}]);