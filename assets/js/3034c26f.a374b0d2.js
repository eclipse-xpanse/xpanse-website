"use strict";(self.webpackChunkosc_website=self.webpackChunkosc_website||[]).push([[185],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>d});var a=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},p="mdxType",_={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(t),m=l,d=p["".concat(s,".").concat(m)]||p[m]||_[m]||r;return t?a.createElement(d,o(o({ref:n},u),{},{components:t})):a.createElement(d,o({ref:n},u))}));function d(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=t.length,o=new Array(r);o[0]=m;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[p]="string"==typeof e?e:l,o[1]=i;for(var c=2;c<r;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4456:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>_,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=t(7462),l=(t(7294),t(3905));const r={sidebar_position:4},o="Runtime",i={unversionedId:"runtime",id:"runtime",title:"Runtime",description:"Open Services Cloud runtime is the running module. It packages and executes all together: OCL loader, orchestrator,",source:"@site/docs/runtime.md",sourceDirName:".",slug:"/runtime",permalink:"/xpanse/docs/runtime",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Configuration Language",permalink:"/xpanse/docs/ocl"},next:{title:"REST API",permalink:"/xpanse/docs/api"}},s={},c=[{value:"Build",id:"build",level:2},{value:"Run",id:"run",level:3},{value:"Docker",id:"docker",level:3},{value:"Kubernetes",id:"kubernetes",level:3}],u={toc:c},p="wrapper";function _(e){let{components:n,...t}=e;return(0,l.kt)(p,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"runtime"},"Runtime"),(0,l.kt)("p",null,"Open Services Cloud runtime is the running module. It packages and executes all together: OCL loader, orchestrator,\nplugins, REST API, ..."),(0,l.kt)("h2",{id:"build"},"Build"),(0,l.kt)("p",null,"You can easily build OSC yourself."),(0,l.kt)("p",null,"As requirement, you need:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"a Java Developer Kit (JDK) installed, version 17 or newer. You can use ",(0,l.kt)("a",{parentName:"li",href:"https://openjdk.org/"},"openjdk"),"\nor ",(0,l.kt)("a",{parentName:"li",href:"https://adoptium.net/"},"temurin")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://maven.apache.org/"},"Apache Maven 3.8.x or newer"))),(0,l.kt)("p",null,"You can clone the project locally on your machine with:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ git clone https://github.com/huaweicloud/osc\n$ cd osc\n")),(0,l.kt)("p",null,"First, you can build the whole OSC project, including all modules (orchestrator, OCL, runtime, plugins, etc), simply\nwith:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ mvn clean install\n")),(0,l.kt)("h3",{id:"run"},"Run"),(0,l.kt)("p",null,"By default, the application will not activate any plugins. They must be activated via spring profiles. Also ensure that\nonly one plugin is active at a time."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"for Huawei Cloud:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ cd runtime/target\n$ java -jar osc-runtime-1.0.0-SNAPSHOT.jar -Dspring.profiles.active=huaweicloud\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"for Openstack:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ cd runtime/target\n$ java -jar osc-runtime-1.0.0-SNAPSHOT.jar -Dspring.profiles.active=openstack\n")),(0,l.kt)("p",null,'By default, the runtime is built in "exploded mode". Additionally, you can also build a Docker image\nadding ',(0,l.kt)("inlineCode",{parentName:"p"},"-Ddocker.skip=false")," as build argument:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ cd runtime\n$ mvn clean install -Ddocker.skip=false\n")),(0,l.kt)("p",null,"We can start OSC runtime with a specific plugin by passing the plugin name in the profile name. For example to start\nhuaweicloud"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'$ docker run -e "SPRING_PROFILES_ACTIVE=huaweicloud" --name my-osc-runtime osc\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\nYou can see the log messages:\n\n```shell\n  ___                     ____                  _                  ____ _                 _\n / _ \\ _ __   ___ _ __   / ___|  ___ _ ____   _(_) ___ ___  ___   / ___| | ___  _   _  __| |\n| | | | '_ \\ / _ \\ '_ \\  \\___ \\ / _ \\ '__\\ \\ / / |/ __/ _ \\/ __| | |   | |/ _ \\| | | |/ _` |\n| |_| | |_) |  __/ | | |  ___) |  __/ |   \\ V /| | (_|  __/\\__ \\ | |___| | (_) | |_| | (_| |\n \\___/| .__/ \\___|_| |_| |____/ \\___|_|    \\_/ |_|\\___\\___||___/  \\____|_|\\___/ \\__,_|\\__,_|\n      |_|\n\n        Open Services Cloud 1.0.0-SNAPSHOT (2023)\n11:14:08.843 [main] INFO  o.eclipse.osc.runtime.OscApplication - Starting OscApplication using Java 17.0.5 with PID 20664\n11:14:08.849 [main] INFO  o.eclipse.osc.runtime.OscApplication - No active profile set, falling back to 1 default profile: \"default\"\n11:14:10.600 [main] INFO  o.e.o.o.FileOrchestratorStorage - No other storage beans found. Using default file storage.\n11:14:11.641 [main] WARN  o.e.o.o.OrchestratorService - No OSC plugins are available\n11:14:11.644 [main] INFO  o.eclipse.osc.runtime.OscApplication - Started OscApplication in 3.252 seconds (process running for 3.818)\n\n")),(0,l.kt)("p",null,"The OSC REST API is now available. You can check the status of the runtime by calling the health endpoint on the REST\nAPI:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ curl -XGET http://localhost:8080/osc/health\nready\n")),(0,l.kt)("h3",{id:"docker"},"Docker"),(0,l.kt)("p",null,"If you use ",(0,l.kt)("inlineCode",{parentName:"p"},"-Ddocker.skip=false")," as option on the build command line, you have docker image ready for the runtime."),(0,l.kt)("p",null,"You can see the docker images created:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ docker images|grep osc\nosc                   1.0.0-SNAPSHOT   4b716096304b   15 seconds ago   293MB\nosc                   latest           4b716096304b   15 seconds ago   293MB\n")),(0,l.kt)("p",null,"You can run a docker container with:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ docker run -d --name my-osc -p 8080:8080 osc\n$ docker logs my-osc\n...\n  ___                     ____                  _                  ____ _                 _\n / _ \\ _ __   ___ _ __   / ___|  ___ _ ____   _(_) ___ ___  ___   / ___| | ___  _   _  __| |\n| | | | '_ \\ / _ \\ '_ \\  \\___ \\ / _ \\ '__\\ \\ / / |/ __/ _ \\/ __| | |   | |/ _ \\| | | |/ _` |\n| |_| | |_) |  __/ | | |  ___) |  __/ |   \\ V /| | (_|  __/\\__ \\ | |___| | (_) | |_| | (_| |\n \\___/| .__/ \\___|_| |_| |____/ \\___|_|    \\_/ |_|\\___\\___||___/  \\____|_|\\___/ \\__,_|\\__,_|\n      |_|\n\n        Open Services Cloud 1.0.0-SNAPSHOT (2023)\n11:14:08.843 [main] INFO  o.eclipse.osc.runtime.OscApplication - Starting OscApplication using Java 17.0.5 with PID 20664\n11:14:08.849 [main] INFO  o.eclipse.osc.runtime.OscApplication - No active profile set, falling back to 1 default profile: \"default\"\n11:14:10.600 [main] INFO  o.e.o.o.FileOrchestratorStorage - No other storage beans found. Using default file storage.\n11:14:11.641 [main] WARN  o.e.o.o.OrchestratorService - No OSC plugins are available\n11:14:11.644 [main] INFO  o.eclipse.osc.runtime.OscApplication - Started OscApplication in 3.252 seconds (process running for 3.818)\n\n")),(0,l.kt)("p",null,"The OSC REST API is now available. You can check the status of the runtime by calling the health endpoint on the REST\nAPI:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ curl -XGET http://localhost:8080/osc/health\nready\n")),(0,l.kt)("h3",{id:"kubernetes"},"Kubernetes"),(0,l.kt)("p",null,"OSC provides all Kubernetes manifest files in the ",(0,l.kt)("inlineCode",{parentName:"p"},"runtime/src/main/kubernetes")," folder, allowing you to deploy all\nresources on your Kubernetes cluster."),(0,l.kt)("p",null,"As example, you can deploy on local ",(0,l.kt)("inlineCode",{parentName:"p"},"minikube")," instance. First, start your ",(0,l.kt)("inlineCode",{parentName:"p"},"minikube")," instance:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ minikube start\n$ eval $(minikube -p minikube docker-env)\n")),(0,l.kt)("p",null,"First, you create the ",(0,l.kt)("inlineCode",{parentName:"p"},"osc")," namespace in Kubernetes:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl apply -f runtime/src/main/kubernetes/org.eclipse.osc.namespace.yaml\nnamespace/osc created\n")),(0,l.kt)("p",null,"You can now create the OSC runtime deployment in Kubernetes:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl apply -f runtime/src/main/kubernetes/org.eclipse.osc.deployment.k8s.yaml \ndeployment.apps/osc created\n")),(0,l.kt)("p",null,"You can check the status of the deployment:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl get deployments -n osc\nNAME   READY   UP-TO-DATE   AVAILABLE   AGE\nosc    1/1     1            1           20s\n")),(0,l.kt)("p",null,"and the associated pod running:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl get pods -n osc\nNAME                   READY   STATUS    RESTARTS   AGE\nosc-8699fd7547-vj44p   1/1     Running   0          42s\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\nWe can now deploy the service exposing the port 8080 of the OSC runtime:\n\n```shell\n$ kubectl apply -f runtime/src/main/kubernetes/org.eclipse.osc.service.yaml \nservice/osc created\n")),(0,l.kt)("p",null,"and check that the port is currently bound on the NodePort:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl get services -n osc\nNAME   TYPE       CLUSTER-IP    EXTERNAL-IP   PORT(S)          AGE\nosc    NodePort   10.97.81.86   <none>        8080:32228/TCP   13s\n")),(0,l.kt)("p",null,"We can now access the health endpoint of the OSC REST API:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ minikube service list -n osc\n|-----------|------|-------------|---------------------------|\n| NAMESPACE | NAME | TARGET PORT |            URL            |\n|-----------|------|-------------|---------------------------|\n| osc       | osc  |        8080 | http://192.168.49.2:32228 |\n|-----------|------|-------------|---------------------------|\n")),(0,l.kt)("p",null,"You can now point test the health endpoint:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ curl -XGET http://192.168.49.2:32228/osc/health\nready\n")),(0,l.kt)("p",null,"OSC is now ready on your Kubernetes cluster."))}_.isMDXComponent=!0}}]);