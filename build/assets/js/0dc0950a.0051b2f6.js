"use strict";(self.webpackChunkxpanse_website=self.webpackChunkxpanse_website||[]).push([[6321],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||i;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},16912:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={sidebar_position:10},o="UI",l={unversionedId:"ui",id:"ui",title:"UI",description:"This is the frontend for the Xpanse project which allows cloud service providers to register managed services to the",source:"@site/docs/ui.md",sourceDirName:".",slug:"/ui",permalink:"/xpanse/docs/ui",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Service Deployment",permalink:"/xpanse/docs/service-deployment"},next:{title:"New Developers",permalink:"/xpanse/docs/Contribute/new-developers"}},s={},p=[{value:"Development Setup",id:"development-setup",level:2},{value:"Zitadel Configuration",id:"zitadel-configuration",level:2},{value:"Configuration Properties",id:"configuration-properties",level:2},{value:"Setting Configuration Values",id:"setting-configuration-values",level:3},{value:".env Files",id:"env-files",level:4},{value:"Environment Variables",id:"environment-variables",level:4},{value:"Getting Configuration Values",id:"getting-configuration-values",level:3},{value:"Starting local development server",id:"starting-local-development-server",level:2},{value:"Static Code Analysis",id:"static-code-analysis",level:3},{value:"Code Formatting",id:"code-formatting",level:3},{value:"Generate Rest Client for Xpanse API",id:"generate-rest-client-for-xpanse-api",level:3},{value:"Build for production",id:"build-for-production",level:2},{value:"Docker Image",id:"docker-image",level:2},{value:"Run UI Container",id:"run-ui-container",level:3},{value:"Application Logs",id:"application-logs",level:3}],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"ui"},"UI"),(0,r.kt)("p",null,"This is the frontend for the Xpanse project which allows cloud service providers to register managed services to the\nservice catalog and also for end users to deploy services from the service catalog and manage them."),(0,r.kt)("h2",{id:"development-setup"},"Development Setup"),(0,r.kt)("p",null,"Project is built using ",(0,r.kt)("inlineCode",{parentName:"p"},"ReactJS")," library. As we use ",(0,r.kt)("inlineCode",{parentName:"p"},"TypeScript")," here, we must ensure all objects have its type explicit\ndefined."),(0,r.kt)("p",null,"GUI components are built using ",(0,r.kt)("inlineCode",{parentName:"p"},"antd")," library."),(0,r.kt)("p",null,"Authentication and authorization are built using ",(0,r.kt)("inlineCode",{parentName:"p"},"Zitadel")," which is an oauth2 provider."),(0,r.kt)("h2",{id:"zitadel-configuration"},"Zitadel Configuration"),(0,r.kt)("p",null,"Before we can start using the UI, we must ensure ",(0,r.kt)("inlineCode",{parentName:"p"},"Zitadel")," instance that we consider using,\nhas all the required configuration. Details can be found ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/eclipse-xpanse/xpanse-iam/blob/main/zitadel/terraform/README.md"},"here"),"."),(0,r.kt)("h2",{id:"configuration-properties"},"Configuration Properties"),(0,r.kt)("p",null,"All required configuration parameters must be added to .env\nfile ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/eclipse-xpanse/xpanse-ui/blob/main/.env"},"here"),".\nEven if we do not have a valid default value, we must just add empty value.\nThis file serves as a reference to all required properties."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Very Important"),": Since React is compiled to a static app, all configuration values can be seen directly in the\nbrowser too.\nTherefore, no secure configurations such as passwords, keys, etc. must be added here.")),(0,r.kt)("h3",{id:"setting-configuration-values"},"Setting Configuration Values"),(0,r.kt)("h4",{id:"env-files"},".env Files"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Set values in the .env files.\nAll default values are set in .env files.\nThese are automatically loaded by ",(0,r.kt)("inlineCode",{parentName:"li"},"React")," and there is no need to do anything for this to be loaded."),(0,r.kt)("li",{parentName:"ol"},"For non-default properties or to override the values is .env, we can set the values in new .env files and load them\nusing ",(0,r.kt)("inlineCode",{parentName:"li"},"env-cmd")," framework which will automatically inject the variables.\nExample can be\nfound ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/eclipse-xpanse/xpanse-ui/blob/main/package.json#L20"},"here"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Important"),": .env files must be used only for default configurations or for dev configurations values.")),(0,r.kt)("h4",{id:"environment-variables"},"Environment Variables"),(0,r.kt)("p",null,"All variables can be overridden by setting environment variables and then running the ",(0,r.kt)("inlineCode",{parentName:"p"},"npm run start")," for development or\nwith ",(0,r.kt)("inlineCode",{parentName:"p"},"docker run")," for production."),(0,r.kt)("h3",{id:"getting-configuration-values"},"Getting Configuration Values"),(0,r.kt)("p",null,"We have a custom implementation which reads the configuration from all sources and provides a unified configuration map.\nOnly this must be used for reading configuration from the React app."),(0,r.kt)("p",null,"Implementation can be found ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/eclipse-xpanse/xpanse-ui/blob/main/src/config/config.ts#L16"},"here"),"."),(0,r.kt)("h2",{id:"starting-local-development-server"},"Starting local development server"),(0,r.kt)("p",null,"In the project directory, you can run the below command to start the local development server. This also additionally\nneeds ",(0,r.kt)("inlineCode",{parentName:"p"},"nodejs")," to be installed on the development machine."),(0,r.kt)("p",null,"If there is a local development Zitadel instance and backend API instance, then we must\nset ",(0,r.kt)("inlineCode",{parentName:"p"},"REACT_APP_ZITADEL_CLIENT_ID")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"REACT_APP_XPANSE_API_URL")," environment variables with respective values\nand then run the below command for the application to start."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ npm run start\n")),(0,r.kt)("p",null,"If you wish to use our central Zitadel testbed instance, then simply start the application with the below command."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ npm run start-with-zitadel-testbed\n")),(0,r.kt)("p",null,"Open ",(0,r.kt)("a",{parentName:"p",href:"http://localhost:3000"},"http://localhost:3000")," to view it in the browser."),(0,r.kt)("h3",{id:"static-code-analysis"},"Static Code Analysis"),(0,r.kt)("p",null,"We use ",(0,r.kt)("inlineCode",{parentName:"p"},"eslint")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"knip")," to statically analyze code.\nAlways run the below command locally to ensure the changes made results in no errors. This will also validate the code\nformat.\nIn case of any errors, the CI pipeline will fail when a PR is opened."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"}," npx eslint . --ext .js,.jsx,.ts,.tsx --config package.json --max-warnings=0\n npx knip\n")),(0,r.kt)("h3",{id:"code-formatting"},"Code Formatting"),(0,r.kt)("p",null,"We use ",(0,r.kt)("inlineCode",{parentName:"p"},"prettier")," to format our UI code. To auto format the code, you can run the below command."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"npx prettier --config .prettierrc --write .\n")),(0,r.kt)("h3",{id:"generate-rest-client-for-xpanse-api"},"Generate Rest Client for Xpanse API"),(0,r.kt)("p",null,"We use the openapi generator to generate data models and rest client from the openapi json file.\nThe following steps must be followed to generate a new client and data models whenever there is a new version if the\nswagger json."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Copy the openapi file\nto ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/eclipse-xpanse/xpanse-ui/blob/main/src/xpanse-api/api.json"},"OpenApi JSON File")),(0,r.kt)("li",{parentName:"ol"},"Run the code generator as below",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"    cd src/xpanse-api\n    npx openapi-typescript-codegen --input api.json --output ./generated --exportSchemas false\n")),"This step will generate all required models and client"),(0,r.kt)("li",{parentName:"ol"},"Add license headers."),(0,r.kt)("li",{parentName:"ol"},"Format newly generated files.")),(0,r.kt)("h2",{id:"build-for-production"},"Build for production"),(0,r.kt)("p",null,"The only recommended way to run UI in production is to use the docker image"),(0,r.kt)("h2",{id:"docker-image"},"Docker Image"),(0,r.kt)("p",null,"Docker image for the UI project is based on nginx base image. This is because the project only serves static content."),(0,r.kt)("p",null,"As part of our UI release process, we deliver our official images to GitHub packages.\nAll available images can be found ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/orgs/eclipse-xpanse/packages?tab=packages&q=xpanse-ui"},"here"),"."),(0,r.kt)("h3",{id:"run-ui-container"},"Run UI Container"),(0,r.kt)("p",null,"Container runs the application on port ",(0,r.kt)("inlineCode",{parentName:"p"},"3000")," by default and exposes the UI using HTTP.\nWe must use another SSL load balancer to expose the UI for end users."),(0,r.kt)("p",null,"Production configuration values must be passed as environment variables to docker run for the below vars using ",(0,r.kt)("inlineCode",{parentName:"p"},"-e")," option."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dotenv"},"REACT_APP_ZITADEL_AUTHORITY_NAME # URL for the Oauth provider\nREACT_APP_ZITADEL_CLIENT_ID # Client ID provided by the Oauth provider for UI\nREACT_APP_XPANSE_API_URL # Backend API URL\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull ghcr.io/eclipse-xpanse/xpanse-ui:${version}\ndocker run -d --name ui xpanse-ui\n")),(0,r.kt)("h3",{id:"application-logs"},"Application Logs"),(0,r.kt)("p",null,"All logs from nginx are routed to stdout by default. Using the below command, all application logs can be viewed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"docker logs ui\n")))}d.isMDXComponent=!0}}]);